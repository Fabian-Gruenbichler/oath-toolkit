.\" DO NOT MODIFY THIS FILE!  It was generated by gdoc.
.TH "oath_totp_validate3_callback" 3 "2.0.2.19" "liboath" "liboath"
.SH NAME
oath_totp_validate3_callback \- API function
.SH SYNOPSIS
.B #include <oath.h>
.sp
.BI "int oath_totp_validate3_callback(const char * " secret ", size_t " secret_length ", time_t " now ", unsigned " time_step_size ", time_t " start_offset ", unsigned " digits ", size_t " window ", int * " otp_pos ", uint64_t * " otp_counter ", oath_validate_strcmp_function " strcmp_otp ", void * " strcmp_handle ");"
.SH ARGUMENTS
.IP "const char * secret" 12
the shared secret string
.IP "size_t secret_length" 12
length of \fIsecret\fP
.IP "time_t now" 12
Unix time value to compute TOTP for
.IP "unsigned time_step_size" 12
time step system parameter (typically 30)
.IP "time_t start_offset" 12
Unix time of when to start counting time steps (typically 0)
.IP "unsigned digits" 12
number of requested digits in the OTP
.IP "size_t window" 12
how many OTPs after start counter to test
.IP "int * otp_pos" 12
output search position in search window (may be NULL).
.IP "uint64_t * otp_counter" 12
counter value used to calculate OTP value (may be NULL).
.IP "oath_validate_strcmp_function strcmp_otp" 12
function pointer to a strcmp\-like function.
.IP "void * strcmp_handle" 12
caller handle to be passed on to \fIstrcmp_otp\fP.
.SH "DESCRIPTION"
Validate an OTP according to OATH TOTP algorithm per RFC 6238.

Validation is implemented by generating a number of potential OTPs
and performing a call to the \fIstrcmp_otp\fP function, to compare the
potential OTP against the given \fIotp\fP.  It has the following
prototype:

int (*oath_validate_strcmp_function) (void *handle, const char *test_otp);

The function should be similar to strcmp in that it return 0 only
on matches.  It differs by permitting use of negative return codes
as indication of internal failures in the callback.  Positive
values indicate OTP mismatch.

This callback interface is useful when you cannot compare OTPs
directly using normal strcmp, but instead for example only have a
hashed OTP.  You would then typically pass in the hashed OTP in the
\fIstrcmp_handle\fP and let your implementation of \fIstrcmp_otp\fP hash the
test_otp OTP using the same hash, and then compare the results.

Currently only OTP lengths of 6, 7 or 8 digits are supported.  This
restrictions may be lifted in future versions, although some
limitations are inherent in the protocol.
.SH "RETURNS"
Returns absolute value of position in OTP window (zero is
first position), or \fBOATH_INVALID_OTP\fP if no OTP was found in OTP
window, or an error code.
.SH "SINCE"
2.2.0
.SH "REPORTING BUGS"
Report bugs to <oath-toolkit-help@nongnu.org>.
liboath home page: http://www.gnu.org/software/liboath/
General help using GNU software: http://www.gnu.org/gethelp/
.SH COPYRIGHT
Copyright \(co 2009-2012 Simon Josefsson.
.br
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
